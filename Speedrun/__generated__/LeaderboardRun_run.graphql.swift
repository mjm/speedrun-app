// Auto-generated by relay-compiler. Do not edit.

import Relay

struct LeaderboardRun_run {
    var fragmentPointer: FragmentPointer

    init(key: LeaderboardRun_run_Key) {
        fragmentPointer = key.fragment_LeaderboardRun_run
    }

    static var node: ReaderFragment {
        ReaderFragment(
            name: "LeaderboardRun_run",
            type: "PlacedRun",
            selections: [
                .field(ReaderScalarField(
                    name: "place"
                )),
                .field(ReaderLinkedField(
                    name: "run",
                    concreteType: "Run",
                    plural: false,
                    selections: [
                        .field(ReaderScalarField(
                            name: "id"
                        )),
                        .field(ReaderScalarField(
                            name: "comment"
                        )),
                        .field(ReaderScalarField(
                            name: "time"
                        )),
                        .field(ReaderLinkedField(
                            name: "players",
                            plural: true,
                            selections: [
                                .inlineFragment(ReaderInlineFragment(
                                    type: "UserRunPlayer",
                                    selections: [
                                        .field(ReaderLinkedField(
                                            name: "user",
                                            concreteType: "User",
                                            plural: false,
                                            selections: [
                                                .field(ReaderScalarField(
                                                    name: "name"
                                                ))
                                            ]
                                        ))
                                    ]
                                )),
                                .inlineFragment(ReaderInlineFragment(
                                    type: "GuestRunPlayer",
                                    selections: [
                                        .field(ReaderScalarField(
                                            name: "name"
                                        ))
                                    ]
                                ))
                            ]
                        ))
                    ]
                ))
            ])
    }
}


extension LeaderboardRun_run {
    struct Data: Readable {
        var place: Int
        var run: Run_run

        init(from data: SelectorData) {
            place = data.get(Int.self, "place")
            run = data.get(Run_run.self, "run")
        }

        struct Run_run: Readable {
            var id: String
            var comment: String
            var time: Double?
            var players: [RunPlayer_players]

            init(from data: SelectorData) {
                id = data.get(String.self, "id")
                comment = data.get(String.self, "comment")
                time = data.get(Double?.self, "time")
                players = data.get([RunPlayer_players].self, "players")
            }

            enum RunPlayer_players: Readable {
                case userRunPlayer(UserRunPlayer)
                case guestRunPlayer(GuestRunPlayer)
                case unknown
  
                init(from data: SelectorData) {
                    let typeName = data.get(String.self, "__typename")
                    switch typeName {
                    case "UserRunPlayer":
                        self = .userRunPlayer(UserRunPlayer(from: data))
                    case "GuestRunPlayer":
                        self = .guestRunPlayer(GuestRunPlayer(from: data))
                    default:
                        self = .unknown
                    }
                }

                var asUserRunPlayer: UserRunPlayer? {
                    if case .userRunPlayer(let val) = self {
                        return val
                    }
                    return nil
                }

                var asGuestRunPlayer: GuestRunPlayer? {
                    if case .guestRunPlayer(let val) = self {
                        return val
                    }
                    return nil
                }

                struct UserRunPlayer: Readable {
                    var user: User_user?

                    init(from data: SelectorData) {
                        user = data.get(User_user?.self, "user")
                    }

                    struct User_user: Readable {
                        var name: String?

                        init(from data: SelectorData) {
                            name = data.get(String?.self, "name")
                        }
                    }
                }

                struct GuestRunPlayer: Readable {
                    var name: String

                    init(from data: SelectorData) {
                        name = data.get(String.self, "name")
                    }
                }
            }
        }
    }
}

protocol LeaderboardRun_run_Key {
    var fragment_LeaderboardRun_run: FragmentPointer { get }
}

extension LeaderboardRun_run: Relay.Fragment {}
