// Auto-generated by relay-compiler. Do not edit.

import Relay

struct LeaderboardRun_run {
    var fragmentPointer: FragmentPointer

    init(key: LeaderboardRun_run_Key) {
        fragmentPointer = key.fragment_LeaderboardRun_run
    }

    static var node: ReaderFragment {
        ReaderFragment(
            name: "LeaderboardRun_run",
            type: "PlacedRun",
            selections: [
                .field(ReaderScalarField(
                    name: "place"
                )),
                .field(ReaderLinkedField(
                    name: "run",
                    concreteType: "Run",
                    plural: false,
                    selections: [
                        .field(ReaderScalarField(
                            name: "id"
                        )),
                        .field(ReaderScalarField(
                            name: "comment"
                        )),
                        .field(ReaderScalarField(
                            name: "time"
                        )),
                        .field(ReaderLinkedField(
                            name: "players",
                            plural: true,
                            selections: [
                                .inlineFragment(ReaderInlineFragment(
                                    type: "UserRunPlayer",
                                    selections: [
                                        .field(ReaderLinkedField(
                                            name: "user",
                                            concreteType: "User",
                                            plural: false,
                                            selections: [
                                                .field(ReaderScalarField(
                                                    name: "name"
                                                ))
                                            ]
                                        ))
                                    ]
                                )),
                                .inlineFragment(ReaderInlineFragment(
                                    type: "GuestRunPlayer",
                                    selections: [
                                        .field(ReaderScalarField(
                                            name: "name"
                                        ))
                                    ]
                                ))
                            ]
                        ))
                    ]
                ))
            ]
        )
    }
}

extension LeaderboardRun_run {
    struct Data: Decodable {
        var place: Int
        var run: Run_run

        struct Run_run: Decodable, Identifiable {
            var id: String
            var comment: String
            var time: Double?
            var players: [RunPlayer_players]

            enum RunPlayer_players: Decodable {
                case userRunPlayer(UserRunPlayer)
                case guestRunPlayer(GuestRunPlayer)
                case runPlayer(RunPlayer)

                private enum TypeKeys: String, CodingKey {
                    case __typename
                }

                init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: TypeKeys.self)
                    let typeName = try container.decode(String.self, forKey: .__typename)
                    switch typeName {
                    case "UserRunPlayer":
                        self = .userRunPlayer(try UserRunPlayer(from: decoder))
                    case "GuestRunPlayer":
                        self = .guestRunPlayer(try GuestRunPlayer(from: decoder))
                    default:
                        self = .runPlayer(try RunPlayer(from: decoder))
                    }
                }

                var asUserRunPlayer: UserRunPlayer? {
                    if case .userRunPlayer(let val) = self {
                        return val
                    }
                    return nil
                }

                var asGuestRunPlayer: GuestRunPlayer? {
                    if case .guestRunPlayer(let val) = self {
                        return val
                    }
                    return nil
                }

                var asRunPlayer: RunPlayer? {
                    if case .runPlayer(let val) = self {
                        return val
                    }
                    return nil
                }

                struct UserRunPlayer: Decodable {
                    var user: User_user?

                    struct User_user: Decodable {
                        var name: String?
                    }
                }

                struct GuestRunPlayer: Decodable {
                    var name: String
                }

                struct RunPlayer: Decodable {
                }
            }
        }
    }
}

protocol LeaderboardRun_run_Key {
    var fragment_LeaderboardRun_run: FragmentPointer { get }
}

extension LeaderboardRun_run: Relay.Fragment {}

#if swift(>=5.3) && canImport(RelaySwiftUI)
import RelaySwiftUI

extension LeaderboardRun_run_Key {
    @available(iOS 14.0, macOS 10.16, tvOS 14.0, watchOS 7.0, *)
    func asFragment() -> RelaySwiftUI.FragmentNext<LeaderboardRun_run> {
        RelaySwiftUI.FragmentNext<LeaderboardRun_run>(self)
    }
}
#endif