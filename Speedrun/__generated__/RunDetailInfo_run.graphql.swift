// Auto-generated by relay-compiler. Do not edit.

import Relay

struct RunDetailInfo_run {
    var fragmentPointer: FragmentPointer

    init(key: RunDetailInfo_run_Key) {
        fragmentPointer = key.fragment_RunDetailInfo_run
    }

    static var node: ReaderFragment {
        ReaderFragment(
            name: "RunDetailInfo_run",
            type: "Run",
            selections: [
                .field(ReaderLinkedField(
                    name: "game",
                    concreteType: "Game",
                    plural: false,
                    selections: [
                        .field(ReaderScalarField(
                            name: "name"
                        ))
                    ]
                )),
                .field(ReaderLinkedField(
                    name: "category",
                    concreteType: "Category",
                    plural: false,
                    selections: [
                        .field(ReaderScalarField(
                            name: "name"
                        ))
                    ]
                )),
                .field(ReaderLinkedField(
                    name: "players",
                    plural: true,
                    selections: [
                        .fragmentSpread(ReaderFragmentSpread(
                            name: "RunPlayerRow_player"
                        )),
                        .inlineFragment(ReaderInlineFragment(
                            type: "UserRunPlayer",
                            selections: [
                                .field(ReaderLinkedField(
                                    name: "user",
                                    concreteType: "User",
                                    plural: false,
                                    selections: [
                                        .field(ReaderScalarField(
                                            name: "name"
                                        ))
                                    ]
                                ))
                            ]
                        )),
                        .inlineFragment(ReaderInlineFragment(
                            type: "GuestRunPlayer",
                            selections: [
                                .field(ReaderScalarField(
                                    name: "name"
                                ))
                            ]
                        ))
                    ]
                ))
            ])
    }
}


extension RunDetailInfo_run {
    struct Data: Readable {
        var game: Game_game
        var category: Category_category
        var players: [RunPlayer_players]

        init(from data: SelectorData) {
            game = data.get(Game_game.self, "game")
            category = data.get(Category_category.self, "category")
            players = data.get([RunPlayer_players].self, "players")
        }

        struct Game_game: Readable {
            var name: String?

            init(from data: SelectorData) {
                name = data.get(String?.self, "name")
            }
        }

        struct Category_category: Readable {
            var name: String

            init(from data: SelectorData) {
                name = data.get(String.self, "name")
            }
        }

        enum RunPlayer_players: Readable, RunPlayerRow_player_Key {
            case userRunPlayer(UserRunPlayer)
            case guestRunPlayer(GuestRunPlayer)
            case unknown
  
            init(from data: SelectorData) {
                let typeName = data.get(String.self, "__typename")
                switch typeName {
                case "UserRunPlayer":
                    self = .userRunPlayer(UserRunPlayer(from: data))
                case "GuestRunPlayer":
                    self = .guestRunPlayer(GuestRunPlayer(from: data))
                default:
                    self = .unknown
                }
            }

            var asUserRunPlayer: UserRunPlayer? {
                if case .userRunPlayer(let val) = self {
                    return val
                }
                return nil
            }

            var asGuestRunPlayer: GuestRunPlayer? {
                if case .guestRunPlayer(let val) = self {
                    return val
                }
                return nil
            }

            var fragment_RunPlayerRow_player: FragmentPointer {
                switch self {
                case .userRunPlayer(let val):
                    return val.fragment_RunPlayerRow_player
                case .guestRunPlayer(let val):
                    return val.fragment_RunPlayerRow_player
                default:
                    preconditionFailure("Trying to access field 'fragment_RunPlayerRow_player' from unknown union member")
                }
            }

            struct UserRunPlayer: Readable, RunPlayerRow_player_Key {
                var fragment_RunPlayerRow_player: FragmentPointer
                var user: User_user?

                init(from data: SelectorData) {
                    fragment_RunPlayerRow_player = data.get(fragment: "RunPlayerRow_player")
                    user = data.get(User_user?.self, "user")
                }

                struct User_user: Readable {
                    var name: String?

                    init(from data: SelectorData) {
                        name = data.get(String?.self, "name")
                    }
                }
            }

            struct GuestRunPlayer: Readable, RunPlayerRow_player_Key {
                var fragment_RunPlayerRow_player: FragmentPointer
                var name: String

                init(from data: SelectorData) {
                    fragment_RunPlayerRow_player = data.get(fragment: "RunPlayerRow_player")
                    name = data.get(String.self, "name")
                }
            }
        }
    }
}

protocol RunDetailInfo_run_Key {
    var fragment_RunDetailInfo_run: FragmentPointer { get }
}

extension RunDetailInfo_run: Relay.Fragment {}
