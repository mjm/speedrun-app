// Auto-generated by relay-compiler. Do not edit.

import Relay

struct RunDetailInfo_run {
    var fragmentPointer: FragmentPointer

    init(key: RunDetailInfo_run_Key) {
        fragmentPointer = key.fragment_RunDetailInfo_run
    }

    static var node: ReaderFragment {
        ReaderFragment(
            name: "RunDetailInfo_run",
            type: "Run",
            selections: [
                .field(ReaderLinkedField(
                    name: "game",
                    concreteType: "Game",
                    plural: false,
                    selections: [
                        .field(ReaderScalarField(
                            name: "name"
                        ))
                    ]
                )),
                .field(ReaderLinkedField(
                    name: "category",
                    concreteType: "Category",
                    plural: false,
                    selections: [
                        .field(ReaderScalarField(
                            name: "name"
                        ))
                    ]
                )),
                .field(ReaderLinkedField(
                    name: "players",
                    plural: true,
                    selections: [
                        .fragmentSpread(ReaderFragmentSpread(
                            name: "RunPlayerRow_player"
                        )),
                        .inlineFragment(ReaderInlineFragment(
                            type: "UserRunPlayer",
                            selections: [
                                .field(ReaderLinkedField(
                                    name: "user",
                                    concreteType: "User",
                                    plural: false,
                                    selections: [
                                        .field(ReaderScalarField(
                                            name: "name"
                                        ))
                                    ]
                                ))
                            ]
                        )),
                        .inlineFragment(ReaderInlineFragment(
                            type: "GuestRunPlayer",
                            selections: [
                                .field(ReaderScalarField(
                                    name: "name"
                                ))
                            ]
                        ))
                    ]
                ))
            ]
        )
    }
}

extension RunDetailInfo_run {
    struct Data: Decodable {
        var game: Game_game
        var category: Category_category
        var players: [RunPlayer_players]

        struct Game_game: Decodable {
            var name: String?
        }

        struct Category_category: Decodable {
            var name: String
        }

        enum RunPlayer_players: Decodable, RunPlayerRow_player_Key {
            case userRunPlayer(UserRunPlayer)
            case guestRunPlayer(GuestRunPlayer)
            case runPlayer(RunPlayer)

            private enum TypeKeys: String, CodingKey {
                case __typename
            }

            init(from decoder: Decoder) throws {
                let container = try decoder.container(keyedBy: TypeKeys.self)
                let typeName = try container.decode(String.self, forKey: .__typename)
                switch typeName {
                case "UserRunPlayer":
                    self = .userRunPlayer(try UserRunPlayer(from: decoder))
                case "GuestRunPlayer":
                    self = .guestRunPlayer(try GuestRunPlayer(from: decoder))
                default:
                    self = .runPlayer(try RunPlayer(from: decoder))
                }
            }

            var asUserRunPlayer: UserRunPlayer? {
                if case .userRunPlayer(let val) = self {
                    return val
                }
                return nil
            }

            var asGuestRunPlayer: GuestRunPlayer? {
                if case .guestRunPlayer(let val) = self {
                    return val
                }
                return nil
            }

            var asRunPlayer: RunPlayer? {
                if case .runPlayer(let val) = self {
                    return val
                }
                return nil
            }

            var fragment_RunPlayerRow_player: FragmentPointer {
                switch self {
                case .userRunPlayer(let val):
                    return val.fragment_RunPlayerRow_player
                case .guestRunPlayer(let val):
                    return val.fragment_RunPlayerRow_player
                case .runPlayer(let val):
                    return val.fragment_RunPlayerRow_player
                }
            }

            struct UserRunPlayer: Decodable, RunPlayerRow_player_Key {
                var fragment_RunPlayerRow_player: FragmentPointer
                var user: User_user?

                struct User_user: Decodable {
                    var name: String?
                }
            }

            struct GuestRunPlayer: Decodable, RunPlayerRow_player_Key {
                var fragment_RunPlayerRow_player: FragmentPointer
                var name: String
            }

            struct RunPlayer: Decodable, RunPlayerRow_player_Key {
                var fragment_RunPlayerRow_player: FragmentPointer
            }
        }
    }
}

protocol RunDetailInfo_run_Key {
    var fragment_RunDetailInfo_run: FragmentPointer { get }
}

extension RunDetailInfo_run: Relay.Fragment {}

#if swift(>=5.3) && canImport(RelaySwiftUI)
import RelaySwiftUI

extension RunDetailInfo_run_Key {
    @available(iOS 14.0, macOS 10.16, tvOS 14.0, watchOS 7.0, *)
    func asFragment() -> RelaySwiftUI.FragmentNext<RunDetailInfo_run> {
        RelaySwiftUI.FragmentNext<RunDetailInfo_run>(self)
    }
}
#endif