// Auto-generated by relay-compiler. Do not edit.

import Relay

struct GameSearchResultRow_game {
    var fragmentPointer: FragmentPointer

    init(key: GameSearchResultRow_game_Key) {
        fragmentPointer = key.fragment_GameSearchResultRow_game
    }

    static var node: ReaderFragment {
        ReaderFragment(
            name: "GameSearchResultRow_game",
            type: "Game",
            selections: [
                .field(ReaderScalarField(
                    name: "name"
                )),
                .field(ReaderLinkedField(
                    name: "asset",
                    alias: "cover",
                    args: [
                        LiteralArgument(name: "kind", value: "COVER_MEDIUM")
                    ],
                    concreteType: "GameAsset",
                    plural: false,
                    selections: [
                        .field(ReaderScalarField(
                            name: "uri"
                        ))
                    ]
                ))
            ])
    }
}


extension GameSearchResultRow_game {
    struct Data: Readable {
        var name: String?
        var cover: GameAsset_cover?

        init(from data: SelectorData) {
            name = data.get(String?.self, "name")
            cover = data.get(GameAsset_cover?.self, "cover")
        }

        struct GameAsset_cover: Readable {
            var uri: String

            init(from data: SelectorData) {
                uri = data.get(String.self, "uri")
            }
        }
    }
}

protocol GameSearchResultRow_game_Key {
    var fragment_GameSearchResultRow_game: FragmentPointer { get }
}

extension GameSearchResultRow_game: Relay.Fragment {}
