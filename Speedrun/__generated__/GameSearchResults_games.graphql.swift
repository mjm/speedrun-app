// Auto-generated by relay-compiler. Do not edit.

import Relay

struct GameSearchResults_games {
    var fragmentPointer: FragmentPointer

    init(key: GameSearchResults_games_Key) {
        fragmentPointer = key.fragment_GameSearchResults_games
    }

    static var node: ReaderFragment {
        ReaderFragment(
            name: "GameSearchResults_games",
            selections: [
                .field(ReaderLinkedField(
                    name: "__GameSearchResults_games_connection",
                    alias: "games",
                    args: [
                        ObjectValueArgument(name: "filter", fields: [
                            VariableArgument(name: "name", variableName: "query")
                        ])
                    ],
                    concreteType: "GameConnection",
                    plural: false,
                    selections: [
                        .field(ReaderLinkedField(
                            name: "edges",
                            concreteType: "GameEdge",
                            plural: true,
                            selections: [
                                .field(ReaderLinkedField(
                                    name: "node",
                                    concreteType: "Game",
                                    plural: false,
                                    selections: [
                                        .field(ReaderScalarField(
                                            name: "id"
                                        )),
                                        .field(ReaderScalarField(
                                            name: "__typename"
                                        )),
                                        .fragmentSpread(ReaderFragmentSpread(
                                            name: "GameSearchResultRow_game"
                                        ))
                                    ]
                                )),
                                .field(ReaderScalarField(
                                    name: "cursor"
                                ))
                            ]
                        )),
                        .field(ReaderLinkedField(
                            name: "pageInfo",
                            concreteType: "PageInfo",
                            plural: false,
                            selections: [
                                .field(ReaderScalarField(
                                    name: "endCursor"
                                )),
                                .field(ReaderScalarField(
                                    name: "hasNextPage"
                                ))
                            ]
                        ))
                    ]
                ))
            ])
    }
}


extension GameSearchResults_games {
    struct Data: Readable {
        var games: GameConnection_games

        init(from data: SelectorData) {
            games = data.get(GameConnection_games.self, "games")
        }

        struct GameConnection_games: Readable {
            var edges: [GameEdge_edges]

            init(from data: SelectorData) {
                edges = data.get([GameEdge_edges].self, "edges")
            }

            struct GameEdge_edges: Readable {
                var node: Game_node

                init(from data: SelectorData) {
                    node = data.get(Game_node.self, "node")
                }

                struct Game_node: Readable, GameSearchResultRow_game_Key {
                    var id: String
                    var fragment_GameSearchResultRow_game: FragmentPointer

                    init(from data: SelectorData) {
                        id = data.get(String.self, "id")
                        fragment_GameSearchResultRow_game = data.get(fragment: "GameSearchResultRow_game")
                    }
                }
            }
        }
    }
}

protocol GameSearchResults_games_Key {
    var fragment_GameSearchResults_games: FragmentPointer { get }
}

extension GameSearchResults_games: Relay.Fragment {}

extension GameSearchResults_games: Relay.PaginationFragment {
    typealias Operation = GameSearchResultsPaginationQuery

    static var metadata: Metadata {
        RefetchMetadata(
            path: ["viewer"],
            operation: Operation.self,
            connection: ConnectionMetadata(
                path: ["games"],
                forward: ConnectionVariableConfig(count: "count", cursor: "cursor")))
    }
}
