// Auto-generated by relay-compiler. Do not edit.

import Relay

struct GameDetailHeader_game {
    var fragmentPointer: FragmentPointer

    init(key: GameDetailHeader_game_Key) {
        fragmentPointer = key.fragment_GameDetailHeader_game
    }

    static var node: ReaderFragment {
        ReaderFragment(
            name: "GameDetailHeader_game",
            type: "Game",
            selections: [
                .field(ReaderScalarField(
                    name: "name"
                )),
                .field(ReaderLinkedField(
                    name: "asset",
                    alias: "cover",
                    args: [
                        LiteralArgument(name: "kind", value: "COVER_MEDIUM")
                    ],
                    concreteType: "GameAsset",
                    plural: false,
                    selections: [
                        .field(ReaderScalarField(
                            name: "uri"
                        ))
                    ]
                ))
            ])
    }
}


extension GameDetailHeader_game {
    struct Data: Decodable {
        var name: String?
        var cover: GameAsset_cover?

        struct GameAsset_cover: Decodable {
            var uri: String
        }
    }
}

protocol GameDetailHeader_game_Key {
    var fragment_GameDetailHeader_game: FragmentPointer { get }
}

extension GameDetailHeader_game: Relay.Fragment {}

#if canImport(RelaySwiftUI)

import RelaySwiftUI

extension GameDetailHeader_game_Key {
    @available(iOS 14.0, macOS 10.16, tvOS 14.0, watchOS 7.0, *)
    func asFragment() -> RelaySwiftUI.FragmentNext<GameDetailHeader_game> {
        RelaySwiftUI.FragmentNext<GameDetailHeader_game>(self)
    }
}

#endif
