// Auto-generated by relay-compiler. Do not edit.

import Relay

struct LeaderboardScreenQuery {
    var variables: Variables

    init(variables: Variables) {
        self.variables = variables
    }

    static var node: ConcreteRequest {
        ConcreteRequest(
            fragment: ReaderFragment(
                name: "LeaderboardScreenQuery",
                type: "Query",
                selections: [
                    .field(ReaderLinkedField(
                        name: "viewer",
                        concreteType: "Viewer",
                        plural: false,
                        selections: [
                            .field(ReaderLinkedField(
                                name: "leaderboard",
                                args: [
                                    VariableArgument(name: "category", variableName: "categoryID"),
                                    VariableArgument(name: "game", variableName: "gameID"),
                                    VariableArgument(name: "level", variableName: "levelID")
                                ],
                                concreteType: "Leaderboard",
                                plural: false,
                                selections: [
                                    .field(ReaderLinkedField(
                                        name: "category",
                                        concreteType: "Category",
                                        plural: false,
                                        selections: [
                                            .field(ReaderScalarField(
                                                name: "name"
                                            ))
                                        ]
                                    )),
                                    .fragmentSpread(ReaderFragmentSpread(
                                        name: "LeaderboardRunsList_leaderboard",
                                        args: [
                                            LiteralArgument(name: "count", value: 50)
                                        ]
                                    ))
                                ]
                            ))
                        ]
                    ))
                ]),
            operation: NormalizationOperation(
                name: "LeaderboardScreenQuery",
                selections: [
                    .field(NormalizationLinkedField(
                        name: "viewer",
                        concreteType: "Viewer",
                        plural: false,
                        selections: [
                            .field(NormalizationLinkedField(
                                name: "leaderboard",
                                args: [
                                    VariableArgument(name: "category", variableName: "categoryID"),
                                    VariableArgument(name: "game", variableName: "gameID"),
                                    VariableArgument(name: "level", variableName: "levelID")
                                ],
                                concreteType: "Leaderboard",
                                plural: false,
                                selections: [
                                    .field(NormalizationLinkedField(
                                        name: "category",
                                        concreteType: "Category",
                                        plural: false,
                                        selections: [
                                            .field(NormalizationScalarField(
                                                name: "name"
                                            )),
                                            .field(NormalizationScalarField(
                                                name: "id"
                                            ))
                                        ]
                                    )),
                                    .field(NormalizationLinkedField(
                                        name: "runs",
                                        args: [
                                            LiteralArgument(name: "first", value: 50)
                                        ],
                                        storageKey: "runs(first:50)",
                                        concreteType: "PlacedRun",
                                        plural: true,
                                        selections: [
                                            .field(NormalizationLinkedField(
                                                name: "run",
                                                concreteType: "Run",
                                                plural: false,
                                                selections: [
                                                    .field(NormalizationScalarField(
                                                        name: "id"
                                                    )),
                                                    .field(NormalizationScalarField(
                                                        name: "comment"
                                                    )),
                                                    .field(NormalizationScalarField(
                                                        name: "time"
                                                    )),
                                                    .field(NormalizationLinkedField(
                                                        name: "players",
                                                        plural: true,
                                                        selections: [
                                                            .field(NormalizationScalarField(
                                                                name: "__typename"
                                                            )),
                                                            .inlineFragment(NormalizationInlineFragment(
                                                                type: "UserRunPlayer",
                                                                selections: [
                                                                    .field(NormalizationLinkedField(
                                                                        name: "user",
                                                                        concreteType: "User",
                                                                        plural: false,
                                                                        selections: [
                                                                            .field(NormalizationScalarField(
                                                                                name: "name"
                                                                            )),
                                                                            .field(NormalizationScalarField(
                                                                                name: "id"
                                                                            ))
                                                                        ]
                                                                    ))
                                                                ]
                                                            )),
                                                            .inlineFragment(NormalizationInlineFragment(
                                                                type: "GuestRunPlayer",
                                                                selections: [
                                                                    .field(NormalizationScalarField(
                                                                        name: "name"
                                                                    ))
                                                                ]
                                                            ))
                                                        ]
                                                    ))
                                                ]
                                            )),
                                            .field(NormalizationScalarField(
                                                name: "place"
                                            ))
                                        ]
                                    ))
                                ]
                            ))
                        ]
                    ))
                ]),
            params: RequestParameters(
                name: "LeaderboardScreenQuery",
                operationKind: .query,
                text: """
query LeaderboardScreenQuery(
  $gameID: ID!
  $categoryID: ID!
  $levelID: ID
) {
  viewer {
    leaderboard(game: $gameID, category: $categoryID, level: $levelID) {
      category {
        name
        id
      }
      ...LeaderboardRunsList_leaderboard_knr29
    }
  }
}

fragment LeaderboardRun_run on PlacedRun {
  place
  run {
    id
    comment
    time
    players {
      __typename
      ... on UserRunPlayer {
        user {
          name
          id
        }
      }
      ... on GuestRunPlayer {
        name
      }
    }
  }
}

fragment LeaderboardRunsList_leaderboard_knr29 on Leaderboard {
  runs(first: 50) {
    run {
      id
    }
    ...LeaderboardRun_run
  }
}
"""))
    }
}


extension LeaderboardScreenQuery {
    struct Variables: VariableDataConvertible {
        var gameID: String
        var categoryID: String
        var levelID: String?

        var variableData: VariableData {
            [
                "gameID": gameID,
                "categoryID": categoryID,
                "levelID": levelID,
            ]
        }
    }

    init(gameID: String, categoryID: String, levelID: String? = nil) {
        self.init(variables: .init(gameID: gameID, categoryID: categoryID, levelID: levelID))
    }
}

#if canImport(RelaySwiftUI)

import RelaySwiftUI

@available(iOS 14.0, macOS 10.16, tvOS 14.0, watchOS 7.0, *)
extension RelaySwiftUI.QueryNext.WrappedValue where O == LeaderboardScreenQuery {
    func get(gameID: String, categoryID: String, levelID: String? = nil) -> RelaySwiftUI.QueryNext<LeaderboardScreenQuery>.Result {
        self.get(.init(gameID: gameID, categoryID: categoryID, levelID: levelID))
    }
}

#endif

extension LeaderboardScreenQuery {
    struct Data: Decodable {
        var viewer: Viewer_viewer?

        struct Viewer_viewer: Decodable {
            var leaderboard: Leaderboard_leaderboard?

            struct Leaderboard_leaderboard: Decodable, LeaderboardRunsList_leaderboard_Key {
                var category: Category_category
                var fragment_LeaderboardRunsList_leaderboard: FragmentPointer

                struct Category_category: Decodable {
                    var name: String
                }
            }
        }
    }
}

extension LeaderboardScreenQuery: Relay.Operation {}
